### Error handling {#general-error-handling}

Error handling is an important aspect of implementing a client library.  It is the primary method by which problems are communicated to the consumer. Because we intend for the C client libraries
to be used on a wide range of devices with a wide range of reliability requirements, it's important to provide robust error handling.

We distinguish between several different types of errors:

* Pre-Conditions
    : Pre-Condition errors occur when a caller violates the expectations of a function, for example by passing an out-of-range value or a null pointer. These are always
      avoidable by the direct caller, and will always require a source code change (by the caller) to fix.
* Post-Conditions
    : Post-Condition violations happen when some function didn't do the correct thing, these are _always_ bugs in the function itself, and users shouldn't be
      expected to handle them.
* Exhaustion / Act of God
    : errors like running out of stack space, or dealing with power failure that, in general, can not be anticipated and after which it may be hard to execute any more code,
      let alone recover. Code handling these errors needs to be written to *very* specific requirements, for example not doing any allocations and never growing the stack. Or attempting
      to do a fast shutdown on UPS power.
* Recoverable Error
    : Things like trying to open a file that doesn't exist, or trying to write to a full disk. These kinds of errors can usually be handled by a function's caller directly, 
      and need to be considered by callers that want to be robust.

      
#### Pre Conditions

~ May
Check for the error with an assert, or similar
~

~ MustNot
Report the error to the caller. The calling code doesn't need to know, the human writing the system needs to know
~

~ Must
Provide an error code for each error that the client library can produce.  Provide a list of constants to allow easy identification of error conditions.
~

~ Must
include a clear indication of error conditions that a function can return, generally by returning `null` or `-1`.
~

~ Must
Provide a function that returns rich information about the last error generated by the client library.  Name this function `shortname_last_error()`, where shortname is the short name for your client library.  In the case of HTTP errors, this function must return the originating request (URL, query parameters, and headers) and response (status code and headers).
~

~ Must
Provide a function that returns the error code for the last error generated by the client library.  Name this function `shortname_last_error_code()`, where shortname is the short name for your client library.
~

~ Must
produce an error when any HTTP request fails with an HTTP status code that is not defined by the service/Swagger as a successful status code. These errors should also be logged as errors.
~

~ Must
document the errors that are produced by each method (with the exception of commonly thrown errors that are generally not documented in the target language).
~
