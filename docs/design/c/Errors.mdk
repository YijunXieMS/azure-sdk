### Error handling {#general-error-handling}

Error handling is an important aspect of implementing a client library.  It is the primary method by which problems are communicated to the consumer.  Within the C language, there is no capability to "throw an exception" as there is in most object-orientated languages, so we return an error code instead.

~ Must
provide an error code for each error type that the client library can produce. Provide a list of constants to allow easy identification of error conditions.
~

~ Must
include a clear indication of error conditions that a function can return, generally by returning a non-zero value.
~

~ Must
provide a function that returns the error code for the last error generated by the client library.  Name this function `azure_<groupname>_<shortname>_last_error_code()`, where groupname is one of the known grou shortname is the short name for your client library.
~

~ Must
provide a function that returns rich information about the last error generated by the client library.  Name this function `azure_<groupname>_<shortname>_last_error()`, where shortname is the short name for your client library. In the case of HTTP errors, this function must return the originating request (URL, query parameters, and headers) and response (status code and headers).
~

~ Must
produce an error when any HTTP request fails with an HTTP status code that is not defined by the service/Swagger as a successful status code. These errors should also be logged as errors.
~

~ Must
document the errors that are produced by each method (with the exception of commonly thrown errors that are generally not documented in the target language).
~
